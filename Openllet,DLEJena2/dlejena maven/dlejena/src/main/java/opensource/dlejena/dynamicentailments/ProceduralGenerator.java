package opensource.dlejena.dynamicentailments;

import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.reasoner.rulesys.Rule;
import java.util.ArrayList;
import java.util.List;

/**
 * The abstract class that offers the necessary infrustructure for generating 
 * entailment rules in a procedural manner rather than using templates.
 * A forward-chaining entailment can be dynamically generated, if it contains both TBox and ABox
 * related triples in its condition and only ABox triples in its conclusion, such as the transitive 
 * and symmentric entailments. For example:
 * <p>
 * <code>
 * [symmetric: (?p rdf:type owl:SymmetricProperty)(?s ?p ?o) -> (?o ?p ?s)] 
 * </code>
 * </p>
 * 
 * The first triple is TBox-related, whereas the other two are ABox-related. The DLEJena ABox reasoning procedure
 * is based on the generation of entailments that do not contain any TBox-related triples. In that way, it removes
 * them by grounding the unbound remaining variables with actual ontology values from the TBox. For
 * example, in the case of the symmetric entailment, the rule base of DLEJena would contain as many rules as the
 * symmetric properties of the ontology are. These rules would have the form of: 
 * <p>
 * <code>
 * [(?s p ?o) -> (?o p ?s)] <br><br>
 * </code>
 * </p>
 * where <code>p</code> is a symmetric property. The ProceduralGenerator class provides the basic infrustructure
 * of implementing such an entailment reduction for a particular generic entailment.
 * 
 * @author George Meditskos
 */
public abstract class ProceduralGenerator {

    /**
     * The standard name that all the genetated rules would have.
     */
    private String ruleName;
    
    /**
     * The list where the generated rules will be stored
     */
    private List<Rule> rules;

    /**
     * Constructor.
     * @param ruleName All the entailment rules that are generated for a particular generic entailment have the same 
     * name that is denoted by this parameter.
     */
    public ProceduralGenerator(String ruleName) {
        this.ruleName = ruleName;
        rules = new ArrayList<Rule>();
    }

    /**
     * The main method for defining the entailment reduction procedure for the generic entailment. 
     * The basic idea is to define the code for generating the dynamic entailments, based on the 
     * TBox of the ontology.
     * @param tbox The TBox OntModel that has been generated by the TBox Pellet reasoning procedure.
     */
    abstract public void formABoxRules(OntModel tbox);

    /**
     * A method for obtaining the name of the rules which has been registered in the constructor
     * @return The string of the rule name
     */
    public String getRuleName() {
        return ruleName;
    }

    /**
     * Adds a rule <code>r</code> to the rule list that is maintained by this object.
     * @param r The rule to be added.
     */
    public void addRule(Rule r) {
        rules.add(r);
    }

    /**
     * A method for obtaining the set of the generated rules.
     * @return The list of the generated rules.
     */
    public List<Rule> getRules() {
        return new ArrayList(rules);
    }
}
